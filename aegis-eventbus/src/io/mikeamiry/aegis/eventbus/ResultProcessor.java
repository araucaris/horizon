package io.mikeamiry.aegis.eventbus;

/**
 * Represents a functional interface for processing results generated by an event.
 *
 * <p>The {@code ResultProcessor} interface facilitates the processing of results that are
 * associated with specific events in an event-driven system. It enables users to define custom
 * logic that handles the event and its corresponding result.
 *
 * <p>Key Characteristics: - Designed to process results tied to specific events of type {@code E}
 * extending {@link Event}. - Accepts two parameters: the event and the result, enabling
 * context-specific processing logic. - Often used in conjunction with an event bus to handle
 * results returned by observer methods.
 *
 * <p>Type Parameters: - {@code E}: The type of event being processed, which must implement the
 * {@link Event} interface. - {@code T}: The type of the result associated with the given event.
 *
 * <p>Functional Method: - {@link #process(E, T)}: Processes the given event and its associated
 * result.
 *
 * <p>Typical Use Case: - Implement this interface to define how to handle results returned by
 * observer methods for specific events. Register the implemented processor with an event bus to
 * enable automatic invocation when results need to be processed.
 */
@FunctionalInterface
public interface ResultProcessor<E extends Event, T> {

  void process(final E event, final T result);
}
